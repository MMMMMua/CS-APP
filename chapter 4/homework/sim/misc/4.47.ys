# *data in %rdi, count in %rsi
	.pos 0
	irmovq stack, %rsp
	call main
	halt

	.align 8
array:
	.quad 0x0000000000000005
	.quad 0x0000000000000003
	.quad 0x0000000000000002
	.quad 0x0000000000000001
	.quad 0x0000000000000004
	
main:
	irmovq array, %rdi
	irmovq $5, %rsi
	call bubble
	ret
	
bubble:	
	# i in %rax, last in %rbx	
	rrmovq %rsi, %rbx
	irmovq $0, %r8
	irmovq $1, %r9
	irmovq $8, %r10
	subq %r9, %rbx
	jmp testlast

looplast:	
	rrmovq %r8, %rax #set i to 0
	rrmovq %rdi, %rcx #rcx is data[i]
	jmp testi

loopi:
	rrmovq %r8, %r14	
	mrmovq (%rcx), %r11 #data[i]
	mrmovq 0x8(%rcx), %r12 #data[i+1]
	rrmovq %r11, %r13
	subq %r12, %r13 #data[i] - data[i+1]
	cmovg %r13, %r14
	addq %r12, %r11
	addq %r14, %r12
	subq %r12, %r11
	rmmovq %r11, (%rcx)
	rmmovq %r12, 0x8(%rcx)
	addq %r9, %rax #inc i by 1 
	addq %r10, %rcx # rdi points to data[i+1]
	
testi:
	rrmovq %rax, %rdx #make a copy of i
	subq %rbx, %rdx #i - last
	jl loopi
	subq %r9, %rbx #dec last by 1
	
testlast:
	subq %r8, %rbx
	jg looplast
	ret

#stack starts here and grows to lower addresses.
	.pos 0x200
stack:	
